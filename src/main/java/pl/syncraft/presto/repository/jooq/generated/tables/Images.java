/*
 * This file is generated by jOOQ.
 */
package pl.syncraft.presto.repository.jooq.generated.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import pl.syncraft.presto.repository.jooq.generated.Indexes;
import pl.syncraft.presto.repository.jooq.generated.Keys;
import pl.syncraft.presto.repository.jooq.generated.Public;
import pl.syncraft.presto.repository.jooq.generated.tables.records.ImagesRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Images extends TableImpl<ImagesRecord> {

    private static final long serialVersionUID = -2141736350;

    /**
     * The reference instance of <code>public.images</code>
     */
    public static final Images IMAGES = new Images();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImagesRecord> getRecordType() {
        return ImagesRecord.class;
    }

    /**
     * The column <code>public.images.url</code>.
     */
    public final TableField<ImagesRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.VARCHAR(2000).nullable(false), this, "");

    /**
     * Create a <code>public.images</code> table reference
     */
    public Images() {
        this(DSL.name("images"), null);
    }

    /**
     * Create an aliased <code>public.images</code> table reference
     */
    public Images(String alias) {
        this(DSL.name(alias), IMAGES);
    }

    /**
     * Create an aliased <code>public.images</code> table reference
     */
    public Images(Name alias) {
        this(alias, IMAGES);
    }

    private Images(Name alias, Table<ImagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Images(Name alias, Table<ImagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Images(Table<O> child, ForeignKey<O, ImagesRecord> key) {
        super(child, key, IMAGES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IMAGES_PK);
    }

    @Override
    public UniqueKey<ImagesRecord> getPrimaryKey() {
        return Keys.IMAGES_PK;
    }

    @Override
    public List<UniqueKey<ImagesRecord>> getKeys() {
        return Arrays.<UniqueKey<ImagesRecord>>asList(Keys.IMAGES_PK);
    }

    @Override
    public Images as(String alias) {
        return new Images(DSL.name(alias), this);
    }

    @Override
    public Images as(Name alias) {
        return new Images(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Images rename(String name) {
        return new Images(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Images rename(Name name) {
        return new Images(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
