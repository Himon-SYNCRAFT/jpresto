/*
 * This file is generated by jOOQ.
 */
package pl.syncraft.presto.repository.jooq.generated.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import pl.syncraft.presto.repository.jooq.generated.Indexes;
import pl.syncraft.presto.repository.jooq.generated.Keys;
import pl.syncraft.presto.repository.jooq.generated.Public;
import pl.syncraft.presto.repository.jooq.generated.tables.records.ProductCategoriesRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductCategories extends TableImpl<ProductCategoriesRecord> {

    private static final long serialVersionUID = -1718105082;

    /**
     * The reference instance of <code>public.product_categories</code>
     */
    public static final ProductCategories PRODUCT_CATEGORIES = new ProductCategories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductCategoriesRecord> getRecordType() {
        return ProductCategoriesRecord.class;
    }

    /**
     * The column <code>public.product_categories.product_id</code>.
     */
    public final TableField<ProductCategoriesRecord, Integer> PRODUCT_ID = createField(DSL.name("product_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.product_categories.category_id</code>.
     */
    public final TableField<ProductCategoriesRecord, Integer> CATEGORY_ID = createField(DSL.name("category_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.product_categories</code> table reference
     */
    public ProductCategories() {
        this(DSL.name("product_categories"), null);
    }

    /**
     * Create an aliased <code>public.product_categories</code> table reference
     */
    public ProductCategories(String alias) {
        this(DSL.name(alias), PRODUCT_CATEGORIES);
    }

    /**
     * Create an aliased <code>public.product_categories</code> table reference
     */
    public ProductCategories(Name alias) {
        this(alias, PRODUCT_CATEGORIES);
    }

    private ProductCategories(Name alias, Table<ProductCategoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductCategories(Name alias, Table<ProductCategoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ProductCategories(Table<O> child, ForeignKey<O, ProductCategoriesRecord> key) {
        super(child, key, PRODUCT_CATEGORIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRODUCT_CATEGORIES_PK);
    }

    @Override
    public UniqueKey<ProductCategoriesRecord> getPrimaryKey() {
        return Keys.PRODUCT_CATEGORIES_PK;
    }

    @Override
    public List<UniqueKey<ProductCategoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductCategoriesRecord>>asList(Keys.PRODUCT_CATEGORIES_PK);
    }

    @Override
    public List<ForeignKey<ProductCategoriesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProductCategoriesRecord, ?>>asList(Keys.PRODUCT_CATEGORIES__PRODUCT_CATEGORIES_PRODUCTS_FK, Keys.PRODUCT_CATEGORIES__PRODUCT_CATEGORIES_CATEGORIES_FK);
    }

    public Products products() {
        return new Products(this, Keys.PRODUCT_CATEGORIES__PRODUCT_CATEGORIES_PRODUCTS_FK);
    }

    public Categories categories() {
        return new Categories(this, Keys.PRODUCT_CATEGORIES__PRODUCT_CATEGORIES_CATEGORIES_FK);
    }

    @Override
    public ProductCategories as(String alias) {
        return new ProductCategories(DSL.name(alias), this);
    }

    @Override
    public ProductCategories as(Name alias) {
        return new ProductCategories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCategories rename(String name) {
        return new ProductCategories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCategories rename(Name name) {
        return new ProductCategories(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
