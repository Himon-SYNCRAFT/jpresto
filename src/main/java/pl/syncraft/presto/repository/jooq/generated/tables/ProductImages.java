/*
 * This file is generated by jOOQ.
 */
package pl.syncraft.presto.repository.jooq.generated.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import pl.syncraft.presto.repository.jooq.generated.Indexes;
import pl.syncraft.presto.repository.jooq.generated.Keys;
import pl.syncraft.presto.repository.jooq.generated.Public;
import pl.syncraft.presto.repository.jooq.generated.tables.records.ProductImagesRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductImages extends TableImpl<ProductImagesRecord> {

    private static final long serialVersionUID = 1894250687;

    /**
     * The reference instance of <code>public.product_images</code>
     */
    public static final ProductImages PRODUCT_IMAGES = new ProductImages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductImagesRecord> getRecordType() {
        return ProductImagesRecord.class;
    }

    /**
     * The column <code>public.product_images.product_id</code>.
     */
    public final TableField<ProductImagesRecord, Integer> PRODUCT_ID = createField(DSL.name("product_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.product_images.image</code>.
     */
    public final TableField<ProductImagesRecord, String> IMAGE = createField(DSL.name("image"), org.jooq.impl.SQLDataType.VARCHAR(2000).nullable(false), this, "");

    /**
     * Create a <code>public.product_images</code> table reference
     */
    public ProductImages() {
        this(DSL.name("product_images"), null);
    }

    /**
     * Create an aliased <code>public.product_images</code> table reference
     */
    public ProductImages(String alias) {
        this(DSL.name(alias), PRODUCT_IMAGES);
    }

    /**
     * Create an aliased <code>public.product_images</code> table reference
     */
    public ProductImages(Name alias) {
        this(alias, PRODUCT_IMAGES);
    }

    private ProductImages(Name alias, Table<ProductImagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductImages(Name alias, Table<ProductImagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ProductImages(Table<O> child, ForeignKey<O, ProductImagesRecord> key) {
        super(child, key, PRODUCT_IMAGES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRODUCT_IMAGES_PK);
    }

    @Override
    public UniqueKey<ProductImagesRecord> getPrimaryKey() {
        return Keys.PRODUCT_IMAGES_PK;
    }

    @Override
    public List<UniqueKey<ProductImagesRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductImagesRecord>>asList(Keys.PRODUCT_IMAGES_PK);
    }

    @Override
    public List<ForeignKey<ProductImagesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProductImagesRecord, ?>>asList(Keys.PRODUCT_IMAGES__PRODUCT_IMAGES_PRODUCTS_FK, Keys.PRODUCT_IMAGES__PRODUCT_IMAGES_IMAGES_FK);
    }

    public Products products() {
        return new Products(this, Keys.PRODUCT_IMAGES__PRODUCT_IMAGES_PRODUCTS_FK);
    }

    public Images images() {
        return new Images(this, Keys.PRODUCT_IMAGES__PRODUCT_IMAGES_IMAGES_FK);
    }

    @Override
    public ProductImages as(String alias) {
        return new ProductImages(DSL.name(alias), this);
    }

    @Override
    public ProductImages as(Name alias) {
        return new ProductImages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductImages rename(String name) {
        return new ProductImages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductImages rename(Name name) {
        return new ProductImages(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
